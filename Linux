#include <iostream>
#include <unistd.h>
#include <vector>
#include <sys/wait.h>

bool isPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

void findPrimesAndWrite(int start, int end, int writePipe) {
    for (int i = start; i <= end; ++i) {
        if (isPrime(i)) {
            write(writePipe, &i, sizeof(i));
        }
    }
    int endSignal = -1;
    write(writePipe, &endSignal, sizeof(endSignal));
    close(writePipe);
}

int main() {
    const int intervalSize = 1000;
    const int numProcesses = 10;
    int pipes[numProcesses][2];

    for (int i = 0; i < numProcesses; ++i) {
        if (pipe(pipes[i]) == -1) {
            perror("Pipe creation failed");
            return 1;
        }
    }

    for (int i = 0; i < numProcesses; ++i) {
        int start = i * intervalSize + 1;
        int end = (i + 1) * intervalSize;

        pid_t pid = fork();
        if (pid == -1) {
            perror("Fork failed");
            return 1;
        }

        if (pid == 0) {
            close(pipes[i][0]);
            findPrimesAndWrite(start, end, pipes[i][1]);
            return 0;
        } else {
            close(pipes[i][1]);
        }
    }

    for (int i = 0; i < numProcesses; ++i) {
        int prime;
        while (read(pipes[i][0], &prime, sizeof(prime)) > 0) {
            if (prime == -1) break;
            std::cout << prime << " ";
        }
        close(pipes[i][0]);
    }

    for (int i = 0; i < numProcesses; ++i) {
        wait(NULL);
    }

    std::cout << "\n";
    return 0;
}
